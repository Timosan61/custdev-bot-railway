from abc import ABC, abstractmethod
from typing import Dict, Optional, List
from aiogram import types, Bot
from aiogram.fsm.context import FSMContext
from loguru import logger
import os
import asyncio
from datetime import datetime

from src.services.supabase_service import SupabaseService
from src.services.zep_service import ZepService
from src.services.voice_handler import VoiceMessageHandler
from src.state.user_states import RespondentStates


class BaseRespondentAgent(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–≥–µ–Ω—Ç–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ —Å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è LLM –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, supabase: SupabaseService, zep: ZepService):
        self.supabase = supabase
        self.zep = zep
        # Initialize voice handler with bot token
        bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.voice_handler = VoiceMessageHandler(bot_token=bot_token)
    
    @abstractmethod
    async def generate_first_question(self, instruction: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        pass
    
    @abstractmethod
    async def generate_next_question(self, instruction: str, answers: Dict, history: List) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        pass
    
    @abstractmethod
    async def generate_summary(self, answers: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ –∏–Ω—Ç–µ—Ä–≤—å—é - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        pass
    
    async def start_interview(self, message: types.Message, state: FSMContext, interview_id: str):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–º"""
        user_id = message.from_user.id
        
        # Check if we already have an active session
        current_data = await state.get_data()
        if current_data.get("session_id") and current_data.get("interview_id") == interview_id:
            logger.info(f"Session already active for user {user_id}, interview {interview_id}")
            return
        
        # Get interview details
        interview = self.supabase.get_interview(interview_id)
        if not interview:
            await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # Create session for respondent (instead of response record)
        session = self.supabase.create_session(
            user_id=user_id,
            session_type="respondent",
            interview_id=interview_id
        )
        if not session:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏")
            return
        session_id = session["id"]
        
        # Create Zep session
        zep_session_id = f"respondent_{user_id}_{interview_id}_{session_id}"
        await self.zep.create_session(zep_session_id, {
            "user_id": user_id,
            "interview_id": interview_id,
            "session_id": session_id,
            "type": "respondent"
        })
        
        # Save to state
        await state.update_data(
            interview_id=interview_id,
            session_id=session_id,
            zep_session_id=zep_session_id,
            instruction=interview.get("instruction") or interview.get("fields", {}).get("instruction", ""),
            answers={},
            inactivity_timer=None
        )
        
        # Get instruction
        instruction = interview.get("instruction") or interview.get("fields", {}).get("instruction", "")
        
        # Send welcome message with instruction
        welcome_text = (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é!</b>\n\n"
            f"{instruction}\n\n"
            "–Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã, –∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º.\n"
            "–û—Ç–≤–µ—á–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ —á–µ—Å—Ç–Ω–æ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å, —Å–∫–∞–∂–∏—Ç–µ '—Ö–≤–∞—Ç–∏—Ç' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        
        await message.answer(welcome_text, reply_markup=types.ReplyKeyboardRemove())
        
        # Generate and ask first question
        first_question = await self.generate_first_question(instruction)
        await message.answer(first_question)
        
        # Save first question in state
        await state.update_data(last_question=first_question)
        
        # Log to Zep
        await self.zep.add_message(zep_session_id, "assistant", welcome_text)
        await self.zep.add_message(zep_session_id, "assistant", first_question)
        
        # Start inactivity timer
        await self._start_inactivity_timer(message, state)
    
    async def process_text_message(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        await self._process_message(message.text, message, state)
    
    async def process_voice_message(self, message: types.Message, state: FSMContext, bot: Bot):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # Send processing indicator
        processing_msg = await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # Process voice message
        result = await self.voice_handler.process_voice_message(
            file_id=message.voice.file_id,
            duration=message.voice.duration
        )
        
        # Delete processing message
        await bot.delete_message(message.chat.id, processing_msg.message_id)
        
        if result["success"]:
            text = result["transcription"]
            logger.info(f"Voice transcribed: {text}")
            
            # Process the message
            await self._process_message(text, message, state)
        else:
            error = result.get("error", "Unknown error")
            logger.error(f"Voice processing failed: {error}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
    
    async def _process_message(self, text: str, message: types.Message, state: FSMContext):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞"""
        data = await state.get_data()
        user_id = message.from_user.id
        session_id = data.get("session_id")
        zep_session_id = data.get("zep_session_id")
        instruction = data.get("instruction", "")
        answers = data.get("answers", {})
        last_question = data.get("last_question", "")
        finish_attempts = data.get("finish_attempts", 0)
        last_finish_attempt = data.get("last_finish_attempt", 0)
        
        logger.info(f"Processing respondent message from user {user_id}: {text[:50]}...")
        
        # Log user message to Zep
        await self.zep.add_message(zep_session_id, "user", text)
        
        # Check if user wants to finish
        wants_to_finish = any(word in text.lower() for word in ["—Ö–≤–∞—Ç–∏—Ç", "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", "–≤—Å–µ", "—Å—Ç–æ–ø", "–∑–∞–∫–æ–Ω—á–∏—Ç—å"])
        
        if wants_to_finish:
            current_time = datetime.now().timestamp()
            
            # Reset counter if more than 5 minutes passed since last attempt
            if current_time - last_finish_attempt > 300:  # 5 minutes
                finish_attempts = 0
            
            finish_attempts += 1
            await state.update_data(
                finish_attempts=finish_attempts, 
                last_finish_attempt=current_time
            )
            
            logger.info(f"User wants to finish. Attempt {finish_attempts}")
            
            if finish_attempts >= 2:
                await self._finish_interview(message, state)
                return
            else:
                confirmation_text = (
                    "ü§î <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é?</b>\n\n"
                    "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ—á–µ–Ω—å —Ü–µ–Ω–Ω—ã –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. "
                    "–ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å, —Å–∫–∞–∂–∏—Ç–µ '—Ö–≤–∞—Ç–∏—Ç' –µ—â–µ —Ä–∞–∑.\n\n"
                    "–ò–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º - —è –∑–∞–¥–∞–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
                )
                await message.answer(confirmation_text)
                await self.zep.add_message(zep_session_id, "assistant", confirmation_text)
                return
        else:
            # Reset finish attempts if user continues normally
            if finish_attempts > 0:
                await state.update_data(finish_attempts=0)
                logger.debug("Reset finish attempts - user continues interview")
        
        # Save answer
        answers[last_question] = text
        await state.update_data(answers=answers)
        
        # Update session in database
        self.supabase.update_session(session_id, {"answers": answers})
        
        # Check if we need to send interim summary (after 5, 10, 15 answers)
        answers_count = len(answers)
        if answers_count in [5, 10, 15]:
            asyncio.create_task(self._send_interim_summary(message, state, answers_count))
        
        # Get conversation history
        history = await self.zep.get_memory(zep_session_id, last_n=10)
        
        # Generate next question
        logger.info(f"Generating next question. Answers count: {len(answers)}, Instruction: {instruction[:100]}...")
        next_question = await self.generate_next_question(instruction, answers, history)
        logger.info(f"Generated question: {next_question}")
        
        if next_question:
            await message.answer(next_question)
            await self.zep.add_message(zep_session_id, "assistant", next_question)
            # Save the question for context
            await state.update_data(last_question=next_question)
            # Start inactivity timer for next response
            await self._start_inactivity_timer(message, state)
        else:
            logger.info("Finishing interview - no more questions")
            await self._finish_interview(message, state)
    
    async def _finish_interview(self, message: types.Message, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—é–º–µ"""
        logger.info("Starting interview finish process")
        data = await state.get_data()
        session_id = data.get("session_id")
        interview_id = data.get("interview_id")
        answers = data.get("answers", {})
        
        logger.info(f"Finishing interview {interview_id} with {len(answers)} answers")
        logger.info(f"Session ID: {session_id}")
        logger.info(f"User: {message.from_user.id} (@{message.from_user.username})")
        
        # Generate summary
        summary = await self.generate_summary(answers)
        logger.info(f"Generated summary: {summary[:100]}...")
        
        # Update session
        self.supabase.update_session(session_id, {
            "status": "completed",
            "summary": summary,
            "answers": answers
        })
        
        # Send to researcher
        interview = self.supabase.get_interview(interview_id)
        logger.info(f"Interview data: {interview}")
        
        researcher_id = None
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç
        if interview:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
            researcher_id = interview.get("researcher_telegram_id")
            logger.info(f"Checking top-level researcher_telegram_id: {researcher_id}")
            
            # –ó–∞—Ç–µ–º –≤ –ø–æ–ª—è—Ö
            if not researcher_id and "fields" in interview:
                researcher_id = interview["fields"].get("researcher_telegram_id")
                logger.info(f"Checking fields.researcher_telegram_id: {researcher_id}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            if researcher_id and isinstance(researcher_id, str):
                try:
                    researcher_id = int(researcher_id)
                    logger.info(f"Converted researcher_id to int: {researcher_id}")
                except ValueError:
                    logger.error(f"Cannot convert researcher_id to int: {researcher_id}")
                    researcher_id = None
        
        if researcher_id:
            summary_text = (
                f"üìä <b>–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</b>\n\n"
                f"<b>–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:</b> @{message.from_user.username or 'anonymous'}\n\n"
                f"<b>–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:</b>\n{summary}\n\n"
                f"<b>–ü–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</b>"
            )
            
            try:
                await message.bot.send_message(researcher_id, summary_text, parse_mode="HTML")
                logger.info(f"Summary sent to researcher {researcher_id}")
            except Exception as e:
                logger.error(f"Failed to send summary to researcher {researcher_id}: {e}")
        
        # Check for reward link
        reward_link = None
        if interview and "fields" in interview:
            reward_link = interview["fields"].get("reward_link")
        
        # Thank respondent with reward if available
        if reward_link:
            thank_text = (
                "üôè <b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é!</b>\n\n"
                "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å –∏ –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç.\n\n"
                "üéÅ <b>–í –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è, –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å –ø–æ–ª–µ–∑–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:</b>\n"
                f"{reward_link}\n\n"
                "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
            )
        else:
            thank_text = (
                "üôè <b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é!</b>\n\n"
                "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å –∏ –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç.\n"
                "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
            )
        
        await message.answer(thank_text, reply_markup=types.ReplyKeyboardRemove())
        
        # Cancel inactivity timer before clearing state
        await self._cancel_inactivity_timer(state)
        
        await state.clear()
    
    async def _send_interim_summary(self, message: types.Message, state: FSMContext, answers_count: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—é"""
        data = await state.get_data()
        interview_id = data.get("interview_id")
        answers = data.get("answers", {})
        
        logger.info(f"Sending interim summary after {answers_count} answers")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Ä–µ–∑—é–º–µ
        summary = await self.generate_summary(answers)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
        researcher_id = await self._get_researcher_id(interview_id)
        if not researcher_id:
            logger.error(f"Researcher ID not found for interview {interview_id}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        interim_text = self._format_interim_report(answers_count, message.from_user.username, summary)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await self._send_message_to_researcher(researcher_id, interim_text, message.bot)
    
    async def _send_inactivity_reminder(self, message: types.Message, state: FSMContext, reminder_number: int = 1):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        data = await state.get_data()
        
        # Check if reminder was already sent
        reminders_sent = data.get("reminders_sent", [])
        if reminder_number in reminders_sent:
            logger.debug(f"Reminder {reminder_number} already sent, skipping")
            return
        
        if reminder_number == 1:
            reminder_text = (
                "üëã <b>–í—ã –µ—â–µ –∑–¥–µ—Å—å?</b>\n\n"
                "–ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–≤–ª–µ–∫–ª–∏—Å—å. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à–µ –∏–Ω—Ç–µ—Ä–≤—å—é!\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ ¬´—Ö–≤–∞—Ç–∏—Ç¬ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            )
        else:
            reminder_text = (
                "‚è∞ <b>–ü—Ä–æ—à–µ–ª —É–∂–µ —á–∞—Å —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å.\n"
                "–ò–ª–∏ —Å–∫–∞–∂–∏—Ç–µ ¬´—Ö–≤–∞—Ç–∏—Ç¬ª, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é."
            )
        
        try:
            await message.answer(reminder_text)
            logger.info(f"Inactivity reminder {reminder_number} sent to user {message.from_user.id}")
            
            # Mark reminder as sent
            reminders_sent.append(reminder_number)
            await state.update_data(reminders_sent=reminders_sent)
            
            # If this was first reminder, schedule second one after 1 hour
            if reminder_number == 1:
                await self._start_second_inactivity_timer(message, state)
        except Exception as e:
            logger.error(f"Failed to send inactivity reminder: {e}")
    
    async def _start_inactivity_timer(self, message: types.Message, state: FSMContext):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∞–π–º–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        await self._cancel_all_timers(state)
        
        # Reset reminders sent when user is active
        await state.update_data(reminders_sent=[])
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
        async def timer_callback():
            await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã
            await self._send_inactivity_reminder(message, state, reminder_number=1)
        
        timer_task = asyncio.create_task(timer_callback())
        await state.update_data(inactivity_timer=timer_task)
        logger.debug(f"Inactivity timer started for user {message.from_user.id}")
    
    async def _start_second_inactivity_timer(self, message: types.Message, state: FSMContext):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (1 —á–∞—Å)"""
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —á–∞—Å
        async def timer_callback():
            await asyncio.sleep(3600)  # 1 —á–∞—Å
            await self._send_inactivity_reminder(message, state, reminder_number=2)
        
        timer_task = asyncio.create_task(timer_callback())
        await state.update_data(second_inactivity_timer=timer_task)
        logger.debug(f"Second inactivity timer started for user {message.from_user.id}")
    
    async def _cancel_all_timers(self, state: FSMContext):
        """–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        data = await state.get_data()
        
        # Cancel first timer
        timer_task = data.get("inactivity_timer")
        if timer_task and not timer_task.done():
            timer_task.cancel()
            logger.debug("First inactivity timer cancelled")
        
        # Cancel second timer
        second_timer_task = data.get("second_inactivity_timer")
        if second_timer_task and not second_timer_task.done():
            second_timer_task.cancel()
            logger.debug("Second inactivity timer cancelled")
    
    async def _cancel_inactivity_timer(self, state: FSMContext):
        """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        await self._cancel_all_timers(state)
    
    async def _get_researcher_id(self, interview_id: str) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å ID –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        interview = self.supabase.get_interview(interview_id)
        if not interview:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
        researcher_id = interview.get("researcher_telegram_id")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ fields
        if not researcher_id and "fields" in interview:
            researcher_id = interview["fields"].get("researcher_telegram_id")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if researcher_id and isinstance(researcher_id, str):
            try:
                researcher_id = int(researcher_id)
            except ValueError:
                logger.error(f"Cannot convert researcher_id to int: {researcher_id}")
                return None
        
        return researcher_id
    
    def _format_interim_report(self, answers_count: int, username: str, summary: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç"""
        return (
            f"üìä <b>–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç ({answers_count} –æ—Ç–≤–µ—Ç–æ–≤)</b>\n\n"
            f"<b>–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:</b> @{username or 'anonymous'}\n\n"
            f"<b>–¢–µ–∫—É—â–µ–µ —Ä–µ–∑—é–º–µ:</b>\n{summary}\n\n"
            f"<i>‚è≥ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...</i>"
        )
    
    async def _send_message_to_researcher(self, researcher_id: int, text: str, bot: Bot):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await bot.send_message(researcher_id, text, parse_mode="HTML")
            logger.info(f"Message sent to researcher {researcher_id}")
        except Exception as e:
            logger.error(f"Failed to send message to researcher {researcher_id}: {e}")