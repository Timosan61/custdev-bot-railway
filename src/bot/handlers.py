from aiogram import Router, types, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from loguru import logger
from typing import Dict, Any

# Import factory functions instead of direct classes
from src.agents import create_researcher_agent, create_respondent_agent
from src.state.user_states import ResearcherStates, RespondentStates
from src.utils.keyboards import get_main_menu_keyboard, get_cancel_keyboard

router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext, **kwargs):
    args = message.text.split()
    
    # Check if user came with interview link
    if len(args) > 1 and args[1].startswith("interview_"):
        interview_id = args[1].replace("interview_", "")
        await start_respondent_interview(message, state, interview_id, **kwargs)
    else:
        await show_main_menu(message, state, **kwargs)

async def show_main_menu(message: types.Message, state: FSMContext, **kwargs):
    await state.clear()
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞—Å—Ç–¥–µ–≤-–±–æ—Ç!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–∞—Å—Ç–¥–µ–≤-–∏–Ω—Ç–µ—Ä–≤—å—é:\n"
        "‚Ä¢ üî¨ <b>–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å</b> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ üìä <b>–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç</b> - –ø—Ä–æ–π—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:"
    )
    await message.answer(text, reply_markup=get_main_menu_keyboard())

async def start_respondent_interview(message: types.Message, state: FSMContext, interview_id: str, **kwargs):
    logger.info(f"Starting respondent interview: {interview_id}")
    supabase = kwargs.get("supabase")
    
    # Get interview data
    interview = supabase.get_interview(interview_id)
    if not interview or interview["status"] != "in_progress":
        await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        await show_main_menu(message, state, **kwargs)
        return
    
    # Initialize respondent agent using factory
    agent = create_respondent_agent(kwargs.get("supabase"), kwargs.get("zep"))
    await state.update_data(agent=agent, interview_id=interview_id)
    await state.set_state(RespondentStates.answering)
    
    # Start interview
    await agent.start_interview(message, state, interview_id)

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–î–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'\n"
        "2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤\n\n"
        "<b>–î–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤:</b>\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è\n"
        "2. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    await message.answer(help_text)

@router.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å")
        return
    
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
    await show_main_menu(message, state)

@router.message(F.text == "üî¨ –°–æ–∑–¥–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
async def start_research(message: types.Message, state: FSMContext, **kwargs):
    logger.info(f"User {message.from_user.id} starting new research")
    
    # Initialize researcher agent using factory
    agent = create_researcher_agent(kwargs.get("supabase"), kwargs.get("zep"))
    await state.update_data(agent=agent)
    await state.set_state(ResearcherStates.collecting_info)
    
    # Start research dialog
    await agent.start_dialog(message, state)

@router.message(F.text == "üìä –ú–æ–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
async def show_my_researches(message: types.Message, **kwargs):
    supabase = kwargs.get("supabase")
    # This feature can be implemented later
    await message.answer("üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

@router.message(ResearcherStates.collecting_info)
async def process_researcher_message(message: types.Message, state: FSMContext, **kwargs):
    data = await state.get_data()
    agent = data.get("agent")  # Type will be BaseResearcherAgent
    
    if not agent:
        await state.clear()
        await show_main_menu(message, state, **kwargs)
        return
    
    # Process message (text or voice)
    if message.voice:
        await agent.process_voice_message(message, state, message.bot)
    else:
        await agent.process_text_message(message, state)

@router.message(RespondentStates.answering)
async def process_respondent_message(message: types.Message, state: FSMContext, **kwargs):
    data = await state.get_data()
    agent = data.get("agent")  # Type will be BaseRespondentAgent
    
    if not agent:
        await state.clear()
        await show_main_menu(message, state, **kwargs)
        return
    
    # Process answer
    if message.voice:
        await agent.process_voice_message(message, state, message.bot)
    else:
        await agent.process_text_message(message, state)

@router.message()
async def echo_handler(message: types.Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")